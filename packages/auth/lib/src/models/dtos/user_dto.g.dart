// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'user_dto.dart';

// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

_$_UserDto _$$_UserDtoFromJson(Map<String, dynamic> json) => _$_UserDto(
      id: json['id'] as String,
      mail: json['mail'] as String,
      firstName: json['firstName'] as String? ?? '',
      lastName: json['lastName'] as String? ?? '',
      googleName: json['googleName'] as String? ?? '',
      gender: $enumDecodeNullable(_$GenderEnumMap, json['gender']) ??
          Gender.unknown,
      country: $enumDecodeNullable(_$CountriesEnumMap, json['country']) ??
          Countries.unknown,
      description: json['description'] as String? ?? '',
      photoUrl: json['photoUrl'] as String? ?? '',
      areasOfInterest: (json['areasOfInterest'] as List<dynamic>?)
              ?.map((e) => $enumDecode(_$SpecificInterestEnumMap, e))
              .toList() ??
          const [],
      socialMedia: (json['socialMedia'] as List<dynamic>?)
              ?.map((e) => SocialMediaDto.fromJson(e as Map<String, dynamic>))
              .toList() ??
          const [],
      profileType:
          $enumDecodeNullable(_$ProfileTypeEnumMap, json['profileType']) ??
              ProfileType.unknown,
      seniority: $enumDecodeNullable(_$SeniorityEnumMap, json['seniority']) ??
          Seniority.unknown,
      onboardingCompleted: json['onboardingCompleted'] as bool? ?? false,
      phoneNumber: json['phoneNumber'] as String? ?? '',
      companyOrSchool: json['companyOrSchool'] as String? ?? '',
      title: json['title'] as String? ?? '',
      objective: (json['objective'] as List<dynamic>?)
              ?.map((e) => $enumDecode(_$ObjectiveEnumMap, e))
              .toList() ??
          const [],
      yearsOfProfesionalExperience:
          json['yearsOfProfesionalExperience'] as int? ?? -1,
      birthDate: json['birthDate'] == null
          ? null
          : DateTime.parse(json['birthDate'] as String),
    );

Map<String, dynamic> _$$_UserDtoToJson(_$_UserDto instance) =>
    <String, dynamic>{
      'id': instance.id,
      'mail': instance.mail,
      'firstName': instance.firstName,
      'lastName': instance.lastName,
      'googleName': instance.googleName,
      'gender': _$GenderEnumMap[instance.gender]!,
      'country': _$CountriesEnumMap[instance.country]!,
      'description': instance.description,
      'photoUrl': instance.photoUrl,
      'areasOfInterest': instance.areasOfInterest
          .map((e) => _$SpecificInterestEnumMap[e]!)
          .toList(),
      'socialMedia': instance.socialMedia,
      'profileType': _$ProfileTypeEnumMap[instance.profileType]!,
      'seniority': _$SeniorityEnumMap[instance.seniority]!,
      'onboardingCompleted': instance.onboardingCompleted,
      'phoneNumber': instance.phoneNumber,
      'companyOrSchool': instance.companyOrSchool,
      'title': instance.title,
      'objective':
          instance.objective.map((e) => _$ObjectiveEnumMap[e]!).toList(),
      'yearsOfProfesionalExperience': instance.yearsOfProfesionalExperience,
      'birthDate': instance.birthDate?.toIso8601String(),
    };

const _$GenderEnumMap = {
  Gender.male: 'male',
  Gender.female: 'female',
  Gender.notSpecified: 'notSpecified',
  Gender.unknown: 'unknown',
};

const _$CountriesEnumMap = {
  Countries.arg: 'arg',
  Countries.alb: 'alb',
  Countries.ger: 'ger',
  Countries.and: 'and',
  Countries.ang: 'ang',
  Countries.antBar: 'antBar',
  Countries.sau: 'sau',
  Countries.alg: 'alg',
  Countries.arm: 'arm',
  Countries.aus: 'aus',
  Countries.aut: 'aut',
  Countries.aze: 'aze',
  Countries.bah: 'bah',
  Countries.ban: 'ban',
  Countries.bar: 'bar',
  Countries.bhr: 'bhr',
  Countries.bel: 'bel',
  Countries.blz: 'blz',
  Countries.ben: 'ben',
  Countries.blr: 'blr',
  Countries.bir: 'bir',
  Countries.bol: 'bol',
  Countries.bosHer: 'bosHer',
  Countries.bot: 'bot',
  Countries.bra: 'bra',
  Countries.bru: 'bru',
  Countries.bul: 'bul',
  Countries.burFas: 'burFas',
  Countries.bur: 'bur',
  Countries.but: 'but',
  Countries.cpv: 'cpv',
  Countries.cam: 'cam',
  Countries.cmr: 'cmr',
  Countries.can: 'can',
  Countries.qat: 'qat',
  Countries.cha: 'cha',
  Countries.chi: 'chi',
  Countries.chn: 'chn',
  Countries.cyp: 'cyp',
  Countries.vat: 'vat',
  Countries.col: 'col',
  Countries.com: 'com',
  Countries.norCor: 'norCor',
  Countries.surCor: 'surCor',
  Countries.cosMar: 'cosMar',
  Countries.cosRic: 'cosRic',
  Countries.cro: 'cro',
  Countries.cub: 'cub',
  Countries.den: 'den',
  Countries.dma: 'dma',
  Countries.ecu: 'ecu',
  Countries.egy: 'egy',
  Countries.slv: 'slv',
  Countries.uae: 'uae',
  Countries.eri: 'eri',
  Countries.slo: 'slo',
  Countries.slov: 'slov',
  Countries.esp: 'esp',
  Countries.usa: 'usa',
  Countries.est: 'est',
  Countries.esw: 'esw',
  Countries.eth: 'eth',
  Countries.phi: 'phi',
  Countries.fin: 'fin',
  Countries.fij: 'fij',
  Countries.fra: 'fra',
  Countries.gab: 'gab',
  Countries.gam: 'gam',
  Countries.geo: 'geo',
  Countries.gha: 'gha',
  Countries.grd: 'grd',
  Countries.gre: 'gre',
  Countries.gua: 'gua',
  Countries.guy: 'guy',
  Countries.gin: 'gin',
  Countries.guiBis: 'guiBis',
  Countries.guiEcu: 'guiEcu',
  Countries.hai: 'hai',
  Countries.hon: 'hon',
  Countries.hun: 'hun',
  Countries.ind: 'ind',
  Countries.idn: 'idn',
  Countries.irq: 'irq',
  Countries.irn: 'irn',
  Countries.irl: 'irl',
  Countries.isl: 'isl',
  Countries.mhl: 'mhl',
  Countries.slb: 'slb',
  Countries.isr: 'isr',
  Countries.ita: 'ita',
  Countries.jam: 'jam',
  Countries.jap: 'jap',
  Countries.jor: 'jor',
  Countries.kaz: 'kaz',
  Countries.ken: 'ken',
  Countries.kgz: 'kgz',
  Countries.kir: 'kir',
  Countries.kwt: 'kwt',
  Countries.lao: 'lao',
  Countries.les: 'les',
  Countries.lva: 'lva',
  Countries.lbn: 'lbn',
  Countries.lbr: 'lbr',
  Countries.lby: 'lby',
  Countries.lie: 'lie',
  Countries.ltu: 'ltu',
  Countries.lux: 'lux',
  Countries.mad: 'mad',
  Countries.mys: 'mys',
  Countries.mwi: 'mwi',
  Countries.mdv: 'mdv',
  Countries.mli: 'mli',
  Countries.mlt: 'mlt',
  Countries.mar: 'mar',
  Countries.mau: 'mau',
  Countries.mrt: 'mrt',
  Countries.mex: 'mex',
  Countries.fsm: 'fsm',
  Countries.mda: 'mda',
  Countries.mco: 'mco',
  Countries.mong: 'mong',
  Countries.mne: 'mne',
  Countries.moz: 'moz',
  Countries.nam: 'nam',
  Countries.nru: 'nru',
  Countries.npa: 'npa',
  Countries.nca: 'nca',
  Countries.ner: 'ner',
  Countries.nga: 'nga',
  Countries.nor: 'nor',
  Countries.nzl: 'nzl',
  Countries.omn: 'omn',
  Countries.nld: 'nld',
  Countries.pak: 'pak',
  Countries.plw: 'plw',
  Countries.pan: 'pan',
  Countries.png: 'png',
  Countries.pry: 'pry',
  Countries.per: 'per',
  Countries.pol: 'pol',
  Countries.prt: 'prt',
  Countries.gbr: 'gbr',
  Countries.rca: 'rca',
  Countries.cze: 'cze',
  Countries.con: 'con',
  Countries.cod: 'cod',
  Countries.dom: 'dom',
  Countries.rum: 'rum',
  Countries.rwa: 'rwa',
  Countries.kna: 'kna',
  Countries.lca: 'lca',
  Countries.vct: 'vct',
  Countries.wsm: 'wsm',
  Countries.smr: 'smr',
  Countries.stp: 'stp',
  Countries.sen: 'sen',
  Countries.srb: 'srb',
  Countries.sey: 'sey',
  Countries.sle: 'sle',
  Countries.sgp: 'sgp',
  Countries.sir: 'sir',
  Countries.som: 'som',
  Countries.lka: 'lka',
  Countries.swz: 'swz',
  Countries.zaf: 'zaf',
  Countries.sds: 'sds',
  Countries.swe: 'swe',
  Countries.sui: 'sui',
  Countries.sur: 'sur',
  Countries.thai: 'thai',
  Countries.tza: 'tza',
  Countries.tjk: 'tjk',
  Countries.tkm: 'tkm',
  Countries.tls: 'tls',
  Countries.tog: 'tog',
  Countries.ton: 'ton',
  Countries.tto: 'tto',
  Countries.tun: 'tun',
  Countries.tur: 'tur',
  Countries.ukr: 'ukr',
  Countries.uga: 'uga',
  Countries.uzb: 'uzb',
  Countries.vut: 'vut',
  Countries.ven: 'ven',
  Countries.vnm: 'vnm',
  Countries.yem: 'yem',
  Countries.dji: 'dji',
  Countries.zmb: 'zmb',
  Countries.zwe: 'zwe',
  Countries.unknown: 'unknown',
};

const _$SpecificInterestEnumMap = {
  SpecificInterest.cyberSecurity: 'cyberSecurity',
  SpecificInterest.dataScience: 'dataScience',
  SpecificInterest.devOps: 'devOps',
  SpecificInterest.htmlAndCss: 'htmlAndCss',
  SpecificInterest.javascript: 'javascript',
  SpecificInterest.react: 'react',
  SpecificInterest.angular: 'angular',
  SpecificInterest.vue: 'vue',
  SpecificInterest.jQuery: 'jQuery',
  SpecificInterest.bootstrap: 'bootstrap',
  SpecificInterest.typescript: 'typescript',
  SpecificInterest.dotNet: 'dotNet',
  SpecificInterest.java: 'java',
  SpecificInterest.nodejs: 'nodejs',
  SpecificInterest.php: 'php',
  SpecificInterest.ruby: 'ruby',
  SpecificInterest.python: 'python',
  SpecificInterest.go: 'go',
  SpecificInterest.rust: 'rust',
  SpecificInterest.flutter: 'flutter',
  SpecificInterest.reactNative: 'reactNative',
  SpecificInterest.swift: 'swift',
  SpecificInterest.kotlin: 'kotlin',
  SpecificInterest.qa: 'qa',
  SpecificInterest.uxUi: 'uxUi',
  SpecificInterest.digitalMarketing: 'digitalMarketing',
  SpecificInterest.productManagement: 'productManagement',
  SpecificInterest.ioT: 'ioT',
  SpecificInterest.blockchain: 'blockchain',
  SpecificInterest.graphicDesign: 'graphicDesign',
};

const _$ProfileTypeEnumMap = {
  ProfileType.mentee: 'mentee',
  ProfileType.mentor: 'mentor',
  ProfileType.unknown: 'unknown',
};

const _$SeniorityEnumMap = {
  Seniority.trainee: 'trainee',
  Seniority.junior: 'junior',
  Seniority.semiSenior: 'semiSenior',
  Seniority.senior: 'senior',
  Seniority.unknown: 'unknown',
};

const _$ObjectiveEnumMap = {
  Objective.findJob: 'findJob',
  Objective.learn: 'learn',
  Objective.network: 'network',
  Objective.grow: 'grow',
  Objective.change: 'change',
  Objective.notSure: 'notSure',
};
